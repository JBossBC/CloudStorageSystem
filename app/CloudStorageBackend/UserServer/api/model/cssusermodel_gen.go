// Code generated by goctl. DO NOT EDIT.

package model

import (

	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cssUserFieldNames          = builder.RawFieldNames(&CssUser{})
	cssUserRows                = strings.Join(cssUserFieldNames, ",")
	cssUserRowsExpectAutoSet   = strings.Join(stringx.Remove(cssUserFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	cssUserRowsWithPlaceHolder = strings.Join(stringx.Remove(cssUserFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"

	cacheCssUserIdPrefix = "cache:cssUser:id:"
)

type (
	cssUserModel interface {
		Insert(ctx context.Context, data *CssUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CssUser, error)
		Update(ctx context.Context, data *CssUser) error
		Delete(ctx context.Context, id int64) error
		FindOneByAccount(ctx context.Context,username string, password string) (*CssUser, error)
	}

	defaultCssUserModel struct {
		sqlc.CachedConn
		table string
	}

	CssUser struct {
		Id       int64  `db:"id"`
		Account  string `db:"account"`
		Name     string `db:"name"`
		Email    string `db:"email"`
		Password string `db:"password"`
		Role     string `db:"role"` // 0:管理员1:普通用户
	}
)

func newCssUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCssUserModel {
	return &defaultCssUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`Css_user`",
	}
}

func(m *defaultCssUserModel) FindOneByAccount(ctx context.Context,username string,password string)(*CssUser,error){
	cssUserIdKey := fmt.Sprintf("%s%v", cacheCssUserIdPrefix, nil)
	var resp CssUser
	err := m.QueryRowCtx(ctx,&resp,cssUserIdKey,func(ctx context.Context, conn sqlx.SqlConn,v interface{}) error{
		query := fmt.Sprintf("select %s from %s where `name` = ? and `password` = ?", cssUserRows,m.table)
		return conn.QueryRowCtx(ctx,v,query,username,password)
	})

	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCssUserModel) Delete(ctx context.Context, id int64) error {
	cssUserIdKey := fmt.Sprintf("%s%v", cacheCssUserIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, cssUserIdKey)
	return err
}

func (m *defaultCssUserModel) FindOne(ctx context.Context, id int64) (*CssUser, error) {
	cssUserIdKey := fmt.Sprintf("%s%v", cacheCssUserIdPrefix, id)
	var resp CssUser
	err := m.QueryRowCtx(ctx, &resp, cssUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cssUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCssUserModel) Insert(ctx context.Context, data *CssUser) (sql.Result, error) {
	cssUserIdKey := fmt.Sprintf("%s%v", cacheCssUserIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, cssUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Account, data.Name, data.Email, data.Password, data.Role)
	}, cssUserIdKey)
	return ret, err
}

func (m *defaultCssUserModel) Update(ctx context.Context, data *CssUser) error {
	cssUserIdKey := fmt.Sprintf("%s%v", cacheCssUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cssUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Account, data.Name, data.Email, data.Password, data.Role, data.Id)
	}, cssUserIdKey)
	return err
}

func (m *defaultCssUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCssUserIdPrefix, primary)
}

func (m *defaultCssUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cssUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCssUserModel) tableName() string {
	return m.table
}
