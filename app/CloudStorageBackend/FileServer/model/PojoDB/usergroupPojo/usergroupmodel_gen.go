// Code generated by goctl. DO NOT EDIT!

package usergroupPojo

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usergroupFieldNames          = builder.RawFieldNames(&Usergroup{})
	usergroupRows                = strings.Join(usergroupFieldNames, ",")
	usergroupRowsExpectAutoSet   = strings.Join(stringx.Remove(usergroupFieldNames, "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	usergroupRowsWithPlaceHolder = strings.Join(stringx.Remove(usergroupFieldNames, "`groupName`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"

	cacheCloudstoragesystemUsergroupGroupNamePrefix = "cache:cloudstoragesystem:usergroup:groupName:"
)

type (
	usergroupModel interface {
		Insert(ctx context.Context, data *Usergroup) (sql.Result, error)
		FindOne(ctx context.Context, groupName string) (*Usergroup, error)
		Update(ctx context.Context, data *Usergroup) error
		Delete(ctx context.Context, groupName string) error
	}

	defaultUsergroupModel struct {
		sqlc.CachedConn
		table string
	}

	Usergroup struct {
		GroupName string `db:"groupName"`
		UserName  string `db:"userName"`
	}
)

func newUsergroupModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUsergroupModel {
	return &defaultUsergroupModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`usergroup`",
	}
}

func (m *defaultUsergroupModel) Delete(ctx context.Context, groupName string, userName string) error {
	cloudstoragesystemUsergroupGroupNameKey := fmt.Sprintf("%s%v%v", cacheCloudstoragesystemUsergroupGroupNamePrefix, groupName, userName)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `groupName` = ? and `userName` = ? ", m.table)
		return conn.ExecCtx(ctx, query, groupName, userName)
	}, cloudstoragesystemUsergroupGroupNameKey)
	return err
}

func (m *defaultUsergroupModel) FindOne(ctx context.Context, groupName string, userName string) (*Usergroup, error) {
	cloudstoragesystemUsergroupGroupNameKey := fmt.Sprintf("%s%v%v", cacheCloudstoragesystemUsergroupGroupNamePrefix, groupName, userName)
	var resp Usergroup
	err := m.QueryRowCtx(ctx, &resp, cloudstoragesystemUsergroupGroupNameKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `groupName` = ? and `userName`= ? limit 1", usergroupRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, groupName, userName)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//TODO need the query method

func (m *defaultUsergroupModel) Insert(ctx context.Context, data *Usergroup) (sql.Result, error) {
	cloudstoragesystemUsergroupGroupNameKey := fmt.Sprintf("%s%v%v", cacheCloudstoragesystemUsergroupGroupNamePrefix, data.GroupName, data.UserName)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, usergroupRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GroupName, data.UserName)
	}, cloudstoragesystemUsergroupGroupNameKey)
	return ret, err
}

func (m *defaultUsergroupModel) Update(ctx context.Context, data *Usergroup) error {
	cloudstoragesystemUsergroupGroupNameKey := fmt.Sprintf("%s%v%v", cacheCloudstoragesystemUsergroupGroupNamePrefix, data.GroupName, data.UserName)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `groupName` = ? and `userName` = ?  ", m.table, usergroupRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserName, data.GroupName, data.UserName)
	}, cloudstoragesystemUsergroupGroupNameKey)
	return err
}

func (m *defaultUsergroupModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudstoragesystemUsergroupGroupNamePrefix, primary)
}

func (m *defaultUsergroupModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `groupName` = ? limit 1", usergroupRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUsergroupModel) tableName() string {
	return m.table
}
